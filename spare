/*using System;
using System.Collections.Generic;
using HtmlAgilityPack;
using ScrapySharp.Extensions;
using ScrapySharp.Network;

namespace Gambot
{
    class Program
    {
        static ScrapingBrowser _scrapingBrowser = new ScrapingBrowser();
        static void Main(string[] args)
        {
            var pageLinks = GetMainPageLinks("https://easyodds.com/football");
            var matchDetails = GetMatchDetails(pageLinks);
            foreach(var match in matchDetails)
            {
                Test(match);
            }
            Console.ReadLine();
        }

        static HtmlNode GetHtml(string url)
        {
            WebPage webPage = _scrapingBrowser.NavigateToPage(new Uri(url));
            return webPage.Html;
        }

        static List<String> GetMainPageLinks(string url)
        {
            var homePageLinks = new List<String>();
            var html = GetHtml(url);
            var links = html.CssSelect("a");
            foreach (var link in links)
            {
                if(link.Attributes["href"].Value.Contains("-v-"))
                {
                    
                    homePageLinks.Add(link.Attributes["href"].Value);
                }
            }
            return homePageLinks;
        }

        static List<MatchDetails> GetMatchDetails (List<String> urls)
        {
            var lstMatchDetails = new List<MatchDetails>();
            foreach(var url in urls)
            {
                var htmlNode = GetHtml(url);
                var matchDetails = new MatchDetails();
                matchDetails.Title = htmlNode.OwnerDocument.DocumentNode.SelectSingleNode("//html/head/title").InnerText;
                matchDetails.Team1 = htmlNode.OwnerDocument.DocumentNode.SelectSingleNode("//html/body/div[11]/div[6]/div[3]/div[1]/div[2]/div/div[1]/div[1]/div[5]/div[1]/a").InnerText.Replace(" ", "");
                matchDetails.Draw = htmlNode.OwnerDocument.DocumentNode.SelectSingleNode("//html/body/div[11]/div[6]/div[3]/div[1]/div[2]/div/div[2]/div[1]/div[5]/div[1]/a").InnerText.Replace(" ", "");
                matchDetails.Team2 = htmlNode.OwnerDocument.DocumentNode.SelectSingleNode("//html/body/div[11]/div[6]/div[3]/div[1]/div[2]/div/div[3]/div[1]/div[5]/div[1]/a").InnerText.Replace(" ", "");

                lstMatchDetails.Add(matchDetails);
            }
            return lstMatchDetails;
        }

        static void Test(MatchDetails details)
        {
            var team1 = FractionToDouble(details.Team1);
            var draw = FractionToDouble(details.Draw);
            var team2 = FractionToDouble(details.Team2);
            double[] spread = new Double[] { 1.0, team1 / draw, team1 / team2};
            double total = spread[0] + spread[1] + spread[2];
            var prof1 = (team1 * spread[0]) - total;
            var profd = (draw * spread[1]) - total;
            var prof2 = (team2 * spread[2]) - total;
            var min = prof1;
            if (profd < min) { min = profd; }
            if (prof2 < min) { min = prof2; }

            if (min > 0 || true) // TODO GET RID OF OR TRUE!!!!
            {
                Console.WriteLine(details.Title);
                Console.WriteLine("Team 1 - " + spread[0]);
                Console.WriteLine("Draw - " + spread[1]);
                Console.WriteLine("Team 2 - " + spread[2]);
                Console.WriteLine("Profit - " + min);
                Console.WriteLine();
            }
        }

        

    }

    abstract class MatchDetails
    {
        static double FractionToDouble(string fraction) {
            double result;

            if(double.TryParse(fraction, out result)) {
                return result;
            }

            string[] split = fraction.Split(new char[] { ' ', '/' });

            if(split.Length == 2 || split.Length == 3) {
                int a, b;

                if(int.TryParse(split[0], out a) && int.TryParse(split[1], out b))
                {
                    if(split.Length == 2) {
                        return (double)a / b;
                    }

                    int c;

                    if(int.TryParse(split[2], out c)) {
                        return a + (double)b / c;
                    }
                }
            }

            throw new FormatException("Not a valid fraction.");
        }

        public abstract void Test();
    }

    public class MatchDrawDetails : MatchDetails
    {
        public string Title = "";
        public string Team1 = "";
        public string Draw = "";
        public string Team2 = "";
        public string Url = "";
    }
}
*/